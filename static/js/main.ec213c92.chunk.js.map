{"version":3,"sources":["TodoCreateForm.js","TodoListItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoCreateForm","props","useState","inputValue","setInputValue","value","onChange","e","target","className","onClick","create","TodoListItem","_id","name","done","toggleDone","remove","move","edit","newTodo","setNewTodo","isEditMode","setIsEditMode","titleStyle","textDecoration","style","type","checked","App","list","setList","title","a","axios","post","then","response","catch","error","console","log","get","listFromServer","data","todoId","put","delete","patch","direction","firstIndex","findIndex","el","secondIndex","length","warn","newList","useEffect","map","i","key","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ec213c92.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\nfunction TodoCreateForm(props) {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const inputOnChange = e => {\r\n      setInputValue(e.target.value)\r\n    };\r\n    const onCreate = () => {\r\n        props.create(inputValue)\r\n        setInputValue('')\r\n    }\r\n    return (\r\n        <div>\r\n           Input Todo Task(s)\r\n            <input value={inputValue} onChange={inputOnChange}/>\r\n            <button className=\"btn btn-outline-secondary\" onClick={onCreate}>Create</button>\r\n            <br/>\r\n            <br/>\r\n            Todo task(s):\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoCreateForm;","import React, {useState} from 'react';\r\nimport './App.css'\r\n\r\n\r\nfunction TodoListItem(props) {\r\n\r\n    const {_id, name, done, toggleDone, remove, move, edit} = props;\r\n\r\n    const [newTodo, setNewTodo] = useState(name)\r\n    const [isEditMode, setIsEditMode] = useState(false)\r\n\r\n    const titleStyle = done ? {textDecoration: 'line-through'} : {};\r\n\r\n    const inputHandler = (e) => {\r\n        setNewTodo(e.target.value)\r\n    };\r\n    const saveButtonHandler = () => {\r\n        edit(_id, newTodo)\r\n        setIsEditMode(false)\r\n    };\r\n\r\n\r\n    if (isEditMode) {\r\n        return (\r\n            <div>\r\n                <input onChange={inputHandler} value={newTodo}/>\r\n                <button className=\"btn btn-outline-info\" onClick={saveButtonHandler}>Save</button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div>\r\n                        <span style={titleStyle}>\r\n                            <input type='checkbox' className='mr-2' checked={done} onChange={() => toggleDone(_id, done)}/>\r\n                            <span className='h5 mr-2'>{name}</span>\r\n                            <button className=\"btn btn-outline-secondary ml-1 mr-1\" onClick={() => remove(_id)}>X</button>\r\n                            <button className=\"btn btn-outline-secondary ml-1 mr-1\" onClick={() => setIsEditMode(true)}>Edit\r\n                            </button>\r\n                            <button className=\"btn btn-outline-secondary ml-1 mr-1\" onClick={() => move(_id, -1)}>↑\r\n                            </button>\r\n                            <button className=\"btn btn-outline-secondary ml-1 mr-1\" onClick={() => move(_id, 1)}>↓\r\n                            </button>\r\n                        </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListItem;\r\n","import React, {useEffect, useState} from 'react';\nimport TodoCreateForm from './TodoCreateForm';\nimport TodoListItem from './TodoListItem';\nimport './App.css';\nimport axios from 'axios'\n\nfunction App() {\n\n\n    const [list, setList] = useState([])\n\n    const create = async (title) => {\n\n        await axios.post('https://my-server89.herokuapp.com/todo', {name: title})\n            .then(function (response) {\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n        await axios.get('https://my-server89.herokuapp.com/todo')\n            .then(function (response) {\n                const listFromServer = response.data\n                console.log(response)\n                setList(listFromServer)\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n    };\n    const toggleDone = async (todoId, done) => {\n       await axios.put(`https://my-server89.herokuapp.com/todo/${todoId}`, {done:!done})\n            .then(function (response) {\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n        await axios.get('https://my-server89.herokuapp.com/todo')\n            .then(function (response) {\n                const listFromServer = response.data\n                console.log(response)\n                setList(listFromServer)\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n    };\n    const remove = async (todoId) => {\n        await axios.delete(`https://my-server89.herokuapp.com/todo/${todoId}`)\n            .then(function (response) {\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n        await axios.get('https://my-server89.herokuapp.com/todo')\n            .then(function (response) {\n                const listFromServer = response.data\n                console.log(response)\n                setList(listFromServer)\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n    };\n\n    const edit = async (todoId, newTodo) => {\n        await axios.patch(`https://my-server89.herokuapp.com/todo/${todoId}`, {name:newTodo})\n            .then(function (response) {\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n\n        await axios.get('https://my-server89.herokuapp.com/todo')\n            .then(function (response) {\n                const listFromServer = response.data\n                console.log(response)\n                setList(listFromServer)\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n    };\n    const move = (todoId, direction) => {\n        const firstIndex = list.findIndex(el => el._id === todoId);\n        const secondIndex = firstIndex + direction;\n\n        if (secondIndex < 0 || secondIndex > list.length - 1) {\n            console.warn(\"CAN'T MOVE!\")\n        } else {\n            const newList = [...list];\n            [newList[firstIndex], newList[secondIndex]] = [newList[secondIndex], newList[firstIndex]]\n\n            setList(newList)\n        }\n    };\n\n    useEffect(() => {\n        axios.get('https://my-server89.herokuapp.com/todo')\n            .then(function (response) {\n                const listFromServer = response.data\n                console.log(response)\n                setList(listFromServer)\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n    }, [])\n    return (\n\n        <div className={'App'}>\n\n            <TodoCreateForm create={create}/>\n        <br/>\n            {list.map((el, i) =>\n                <TodoListItem\n                    _id={el._id}\n                    name={el.name}\n                    done={el.done}\n                    key={el._id}\n                    index={i}\n                    toggleDone={toggleDone}\n                    remove={remove}\n                    move={move}\n                    edit={edit}\n                />)}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}